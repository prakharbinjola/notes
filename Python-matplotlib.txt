Prerequsite data wrangling
df.drop([], axis=1, inplace=True)
df.rename({oldname: newname}, inplace=True)
#df['Total'] = df.sum(axis=1)	#Optional new col
df.isnull().sum()
df.set_index('Colname', inplace=True)
df.index.name = None
all(isinstance(column, str) for column in df.columns)
df.columns = list(map(str, df.columns))



1.
Line plot

***
%matplotlib inline 

import matplotlib as mpl
import matplotlib.pyplot as plt

print(plt.style.available)
mpl.style.use('ggplot')		#or plt.style.use([])

df.plot(kind = 'line')
#line default, optional figsize=(,)

df_CI = df_CI.transpose()	#need to transpose for dataframe

df.index = df.index.map(int)	#convert x-axis to int
plt.text(x, y, label)


df_top5 = df.sort_values(by='Colname', ascending=False).head()
#sort Top 5 values, default axis=0
df_top5 = df_top5['colsneeded'].transpose() 
df_top5.plot(figsize=(14, 8))	#figsize optional
plt.title('')
plt.ylabel('')
plt.xlabel('')



2.
Area plot	#usually used as a cumulative plot


df.index = df.index.map(int)
df.plot(kind='area', stacked=False, figsize=(20,10))
plt.title('')
plt.ylabel('')
plt.xlabel('')
plt.show()
#stacked default=True for area plots only
#alpha=0.5 default transparency


#same plot using artist layer(object oriented)
ax = df.plot(kind='area', stacked=False, alpha=0.55, figsize=(20,10))

ax.set_title('')
ax.set_ylabel('')
ax.set_xlabel('')



3.
Histogram	#frequency distribution


count, bin_edges = np.histogram(df[], 10)
#optional for custom x-axis
#second argument for no of bins default 10
df[].plot(kind='hist', figsize=(), xticks=bin_edges, bins=, alpha=, color=[])
#xticks and bins optional

***
#for full list of colors
import matplotlib as mpl
for name, hex in mpl.colors.cnames.items():
    print(name, hex)


count, bin_edges = np.histogram(df, 15)
xmin = bin_edges[0] - 10
xmax = bin_edges[-1] + 10
df.plot(kind='hist', xlim=(xmin, xmax))
#adding buffer for asthetics



4.
Bar plot
df_iceland.plot(kind='bar', figsize=(10, 6), rot=90)

# Annotate arrow
plt.annotate('',  # s: str. will leave it blank for no text
             xy=(32, 70),  # place head of the arrow at point (year 2012 , pop 70)
             xytext=(28, 20),  # place base of the arrow at point (year 2008 , pop 20)
             xycoords='data',  # will use the coordinate system of the object being annotated
             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)
             )

# Annotate Text
plt.annotate('',  # text to display
             xy=(28, 30),  # start the text at at point (year 2008 , pop 30)
             rotation=72.5,  # based on trial and error to match the arrow
             va='bottom',  # want the text to be vertically 'bottom' aligned
             ha='left',  # want the text to be horizontally 'left' algned.
             )


for index, value in enumerate(df): 
    label = format(int(value), ',')
    plt.annotate(label, xy=(value - 47000, index - 0.10), color='white')



5.
Pie chart

df.groupby - SAC(Split, apply, combine)
#df used after groupby

explode_list = [0.1,0,0,0,0]

df[''].plot(kind='pie',
                      figsize=(15, 6),
                      autopct='%1.1f%%',	# values btw %%
		    pctdistance=1.12	#ratio between the center of each pie slice and the start of the text generated by autopct
                      startangle=90,     # default 0(x-axis)
                      shadow=True,
		    labels=None,
		    explode=explode_list
                      )
plt.axis('equal') # Sets the pie chart to look like a circle.

plt.legend(labels=df[''].index, loc='upper left')



6.
Box plot


df = df.loc[[],].transpose()
df.plot(kind='box', figsize=(8,6))
plt.title()
plt.ylabel()
#xlabel if vert=False
plt.show()

df.describe()	#to check


Subplots
#for subplots we work with artist layer
fig = plt.figure()	#create fig
ax0 = fig.add_subplots(1,2,1)
ax1 = fig.add_subplots(122)

df.plot(kind='', ax=ax0)
ax0.set_title()
ax0.set_xlabel()
ax0.set_ylabel()

df.plot(kind='', ax=ax1)
ax1.set_title()
ax1.set_xlabel()
ax1.set_ylabel()



7.
Scatter plot

df.plot(kind='scatter', x='', y='', figsize=(10,6), color='')

#optional for regression line
x = df[]
y = df[]
fit = np.polyfit(x, y, deg=1)
df.plot(kind='scatter', x='', y='', figsize=(10,6), color='darkblue')
plt.plot(x, fit[0] * x + fit[1], color='red')
plt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))
plt.show()



8.
Bubble plot

### type your answer here

# Brazil
ax0 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='',
                    figsize=(14, 8),
                    alpha=0.5,  # transparency
                    color='green',
                    s=norm_china * 2000 + 10,  # pass in norm weights 
                    xlim=(1975, 2015)
                    )

# Argentina
ax1 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='',
                    alpha=0.5,
                    color="blue",
                    s=norm_data * 2000 + 10,
                    ax=ax0
                    )

ax0.set_ylabel('')
ax0.set_title('')
ax0.legend(['', ''], loc='upper left', fontsize='x-large')





